==========================================================
üß† Red-Black Tree Insertion Fix-Up: All 6 Cases (CLRS)
==========================================================

Precondition:
- Inserted node z is always RED.
- Tree may violate only **one** Red-Black Tree property:





VIOLATION OF PROPERTIES
============================================================
‚ùìWhy Properties 1, 3, and 5 are not violated

‚úÖ Property 1: Every node is either red or black
Never violated because:
When we insert, we explicitly color the new node red.
All existing nodes remain either red or black.
We never assign an illegal color.
‚úÖ Property 3: All leaves (NIL/null) are black
Never violated because:
We never change or color the NIL leaves ‚Äî they are implicitly black and untouched.
When inserting a new node, it becomes a parent of two NIL children, which are still black.
‚úÖ Property 5: All paths from any node to its leaves contain the same number of black nodes
Not violated during insertion because:
The new node is red, so it doesn't add a black node to any path.
Therefore, the number of black nodes on all paths stays the same.
This is why we insert new nodes as red, to avoid violating black-height initially.
üö® Properties That Can Be Violated

‚ùå Property 2: The root is black
Can be violated if the inserted node becomes the root, since we insert it as red.
‚úîÔ∏è Fixed by explicitly recoloring the root to black at the end.
‚ùå Property 4: No red node has a red child
This is the most common violation after insertion.
Occurs when a red node (the inserted z) has a red parent (z.p).
‚úîÔ∏è Fixed using rotations and recoloring (cases 1‚Äì3 / 6 total).


-- Other properties are not violated during insertion
This violation must be fixed to restore all 5 Red-Black properties:
============================================================




----------------------------------------------------------
üß± Red-Black Tree Properties:
----------------------------------------------------------
1. Every node is either red or black.
2. The root is black.
3. All leaves (NIL) are black.
4. If a node is red, both its children are black.  <<-- ONLY violation possible after insert
5. Every path from a node to its descendant NIL nodes has the same number of black nodes.

----------------------------------------------------------
üß© If z->parent is RED, then:
----------------------------------------------------------
- It must have a parent too (i.e. z->parent->parent != NIL)
- Because root is always black ‚Üí z->parent cannot be root.

So we must analyze the structure around z:
- z: newly inserted node
- z.p: parent of z
- z.p.p: grandparent of z
- y: uncle of z (sibling of z.p)

==========================================================
üî¥ CASES WHEN z.p IS THE LEFT CHILD OF z.p.p   
==========================================================

üîª Case 1 (Left-Side): Uncle is RED
Violation: z and z.p are both RED ‚Üí violates property 4

Fix:
- Recolor z.p and y to BLACK
- Recolor z.p.p to RED
- Move z up to z.p.p (may need further fixing)

üîª Case 2 (Left-Side): Uncle is BLACK, z is RIGHT child (Inner case)
Violation: Same red-red violation

Fix:
- Left-rotate at z.p to convert to Case 3 (outer case)

üîª Case 3 (Left-Side): Uncle is BLACK, z is LEFT child (Outer case)
Violation: Same red-red violation

Fix:
- Recolor z.p to BLACK, z.p.p to RED
- Right-rotate at z.p.p

==========================================================
üî¥ CASES WHEN z.p IS THE RIGHT CHILD OF z.p.p
==========================================================

üîª Case 1 (Right-Side): Uncle is RED
Violation: z and z.p are both RED ‚Üí violates property 4

Fix:
- Recolor z.p and y to BLACK
- Recolor z.p.p to RED
- Move z up to z.p.p

üîª Case 2 (Right-Side): Uncle is BLACK, z is LEFT child (Inner case)
Violation: Same red-red violation

Fix:
- Right-rotate at z.p to convert to Case 3 (outer case)

üîª Case 3 (Right-Side): Uncle is BLACK, z is RIGHT child (Outer case)
Violation: Same red-red violation

Fix:
- Recolor z.p to BLACK, z.p.p to RED
- Left-rotate at z.p.p

==========================================================
‚úÖ Summary Table of All 6 Cases
==========================================================

| Case | z.p Position | Uncle Color | z Position             | Action                                                                   |
|------|--------------|-------------|------------------------|--------------------------------------------------------------------------|
| 1    | Left child   | Red         | Doesn‚Äôt matter         | Recolor z.p and uncle to black, grandparent to red; move z upward        |
| 2    | Left child   | Black       | Right child of z.p     | Left-rotate at z.p; proceed to Case 3                                    |
| 3    | Left child   | Black       | Left child of z.p      | Recolor z.p to black, grandparent to red; right-rotate at grandparent    |
| 1    | Right child  | Red         | Doesn‚Äôt matter         | Recolor z.p and uncle to black, grandparent to red; move z upward        |
| 2    | Right child  | Black       | Left child of z.p      | Right-rotate at z.p; proceed to Case 3                                   |
| 3    | Right child  | Black       | Right child of z.p     | Recolor z.p to black, grandparent to red; left-rotate at grandparent     |

==========================================================
üå≥ Final Step:
==========================================================
Always ensure root is BLACK after all fix-up.
(Protects Property 2)
