
===========================================
ðŸ”´ Red-Black Tree Insertion Fix-Up: Loop Behavior
(Cases 1â€“3 Explanation from CLRS)
===========================================

ðŸ”´ Case 1: Uncle is red

âœ… Does the loop repeat after this case?
Yes â€” the loop repeats.

âž¤ Why?
    â€¢ You recolor z.p, uncle, and z.p.p.
    â€¢ Then you move z up to z.p.p, which is now red (you just recolored it).
    â€¢ If z.p.pâ€™s parent is also red, the loop condition is still true: z.p.color == RED.

ðŸ‘‰ So Case 1 does not end the loop â€” it moves the problem up the tree and repeats.

----------------------------------------------------

âš« Case 2: Uncle is black, and z is the inner child

âœ… Does the loop repeat after this case?
No â€” this case is preparation only.

âž¤ Why?
    â€¢ In Case 2, you do a rotation (left or right) at z.p, but donâ€™t move up or change colors yet.
    â€¢ The structure is changed so that Case 3 can be applied immediately in the next lines.
    â€¢ The loop does not repeat here â€” you immediately enter Case 3 logic in the same iteration.

ðŸ‘‰ So Case 2 does not cause the loop to repeat, but sets up Case 3 within the same iteration.

----------------------------------------------------

ðŸ”´ Case 3: Uncle is black, and z is the outer child

âœ… Does the loop repeat after this case?
No â€” the loop exits.

âž¤ Why?
    â€¢ You recolor z.p and z.p.p.
    â€¢ You then rotate at z.p.p, fixing the red-red violation.
    â€¢ Crucially: z no longer has a red parent after this.

ðŸ‘‰ So Case 3 terminates the loop â€” Red-Black properties are restored locally.

=============================================
